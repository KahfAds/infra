volumes:
  tls:
    driver: local
    driver_opts:
      type: "nfs"
      o: "nfsvers=3,addr=${NFS_ENDPOINT},nolock,soft,rw"
      device: ":/${NFS_DEVICE}"
services:
  proxy:
    image: traefik:v3.1.2
    command:
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8899"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--api=true"
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.swarm=true"
      - "--providers.swarm.exposedByDefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.traefik.address=:8080"
      - "--ping.entryPoint=ping"
      - "--certificatesResolvers.letsEncrypt.acme.email=mazharul@kahf.co"
      - "--certificatesResolvers.letsEncrypt.acme.storage=/traefik/tls/acme.json"
      - "--certificatesResolvers.letsEncrypt.acme.httpChallenge.entryPoint=web"
      - "--experimental.plugins.cloudflarewarp.modulename=github.com/BetterCorp/cloudflarewarp"
      - "--experimental.plugins.cloudflarewarp.version=v1.3.3"
      - "--experimental.plugins.google-oidc-auth-middleware.modulename=github.com/andrewkroh/google-oidc-auth-middleware"
      - "--experimental.plugins.google-oidc-auth-middleware.version=v0.1.0"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - tls:/traefik/tls
    ports:
      - target: 80
        published: 80
        mode: host
        protocol: tcp
      - protocol: tcp
        target: 443
        published: 443
        mode: host
      - protocol: tcp
        target: 8080
        published: 8080
        mode: ingress
      - protocol: tcp
        target: 8082
        published: 8082
        mode: ingress
    deploy:
      mode: global
      placement:
        constraints:
          - node.role==manager
        preferences:
          - spread: node.role.manager
      labels:
        - traefik.enable=true
        - traefik.http.services.proxy.loadbalancer.server.port=9999
        - traefik.http.routers.traefik-dashboard.entrypoints=websecure
        - traefik.http.routers.traefik-dashboard.rule=Host(`proxy.kahfads.com`)
        - traefik.http.routers.traefik-dashboard.middlewares=oidc-auth
        - traefik.http.routers.traefik-dashboard.service=api@internal
        - traefik.http.routers.traefik-dashboard.tls=true
        - traefik.http.routers.traefik-dashboard.tls.certresolver=letsEncrypt
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
        - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
        - traefik.http.middlewares.oidc-auth.plugin.google-oidc-auth-middleware.oidc.clientID=${GOOGLE_OIDC_CLIENT_ID}
        - traefik.http.middlewares.oidc-auth.plugin.google-oidc-auth-middleware.oidc.clientSecret=${GOOGLE_OIDC_CLIENT_SECRET}
        - traefik.http.middlewares.oidc-auth.plugin.google-oidc-auth-middleware.cookie.secret=${password}
        - traefik.http.middlewares.oidc-auth.plugin.google-oidc-auth-middleware.authorized.domains=kahf.co
    networks:
      - ${network_name}
      - ad_server
      - monitoring
      - portainer

networks:
  ${network_name}:
    name: ${network_name}
    driver: overlay
    attachable: true
  ad_server:
    name: ethical_ad_server_default
    external: true
  monitoring:
    name: monitoring_default
    external: true
  portainer:
    name: portainer_agent_network
    external: true
