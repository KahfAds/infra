volumes:
  local_metabase_data: { }
  local_media: { }


x-web-env: &django-env
  environment:
    - DEBUG=False
    - USE_DOCKER=true
    - IPYTHONDIR=/app/.ipython
    - MEDIA_URL=https://app.${ROOT_DOMAIN}/media/
    - REDIS_URL=redis://redis:6379/0
#    - DATABASE_ROUTERS=adserver.router.ReportingRouter,adserver.router.DefaultRouter
    - DATABASE_URL=${DATABASE_URL}
    - DB_REPLICAS=${DB_REPLICAS}
    - USE_DB_POOL=True
    - DB_POOL_MIN_SIZE=8
    - DB_POOL_MAX_SIZE=200
    - DB_POOL_TIMEOUT=30
    - DB_DISABLE_SERVER_SIDE_CURSORS=False
    - METABASE_SITE_URL=https://metabase.${ROOT_DOMAIN}
    - ADSERVER_ANALYZER_BACKEND=""
    - COLUMNS=80
    - ETHICALADS_DJANGO_PORT=5000
    - ALLOWED_HOSTS=app.${ROOT_DOMAIN},portal.${ROOT_DOMAIN}
    - SECRET_KEY=${SECRET_KEY}
    - ADSERVER_HTTPS=True
    - DJANGO_SETTINGS_MODULE=config.settings.production
    - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    - DEFAULT_FILE_STORAGE=config.storage.AzureCDNFileStorage
    - DEFAULT_FILE_STORAGE_HOSTNAME=media.${ROOT_DOMAIN}
    - AZURE_ACCOUNT_NAME=${AZURE_ACCOUNT_NAME}
    - AZURE_ACCOUNT_KEY=${AZURE_ACCOUNT_KEY}
    - AZURE_CONTAINER=${AZURE_CONTAINER}
    - SERVER_EMAIL=${SERVER_EMAIL}
    - METABASE_SECRET_KEY=${METABASE_EMBED_KEY}
    - ADSERVER_GEOIP_MIDDLEWARE=adserver.middleware.CloudflareGeoIpMiddleware
    - ADSERVER_IPADDRESS_MIDDLEWARE=adserver.middleware.CloudflareIpAddressMiddleware
    - PUBLISHER_GEO_REPORT=28
    - PUBLISHER_FIGURES=2
    - PUBLISHER_KEYWORD_REPORT=30
    - ALL_ADVERTISERS_BREAKDOWN=31
    - SENTRY_DSN=https://6fee6a733a64437afa77cfd7344fd131@o4508199963459584.ingest.de.sentry.io/4508199965032528
    - ADVERTISER_GEO_REPORT=37
    - ADVERTISER_FIGURES=3
    - ADVERTISER_PER_AD_TABLE=39
    - ADVERTISER_KEYWORD_CTR=41
    - ADVERTISER_TOPIC_PERFORMANCE=42
    - ADSERVER_ETHICALADS_BRANDING=True
    - CORS_ALLOW_ALL_ORIGINS=true
    - SITE_ID=1
    - SECURE_REFERRER_POLICY=origin
    - CSRF_TRUSTED_ORIGINS=https://app.${ROOT_DOMAIN}
    - SMTP_HOST=${SMTP_HOST}
    - SMTP_PORT=${SMTP_PORT}
    - SMTP_USER=${SMTP_USER}
    - SMTP_PASSWORD=${SMTP_PASSWORD}
    - PROMETHEUS_EXPORT_MIGRATIONS=False
    - SECURE_SSL_REDIRECT=False
    - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    - REALTIME_FLIGHT_VIEW_COUNT=True
    - REALTIME_FLIGHT_CLICK_COUNT=True
  networks:
    - default

services:
  django: &django
    image: kahfads${ENV}.azurecr.io/ethical-adserver/backend:latest
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"
    entrypoint: ["/start"]
    command:
      - "uvicorn"
      - "config.asgi:application"
      - "--host=0.0.0.0"
      - "--port=5000"
      - "--lifespan=off"
      - "--workers=4"
      - "--loop=uvloop"
      - "--timeout-graceful-shutdown=5"
      - "--timeout-keep-alive=5"
    volumes:
      - local_media:/app/media
      - /tmp/prometheus
    <<: *django-env
    networks:
      - default
      - monitoring_channel
      - proxy_channel
    deploy:
      resources:
        reservations:
          cpus: '\"4.0\"'
          memory: 8196M
      update_config:
        order: start-first
      mode: replicated
      replicas: ${desired}
      placement:
        constraints:
          - "node.role == worker"
        preferences:
          - spread: node.id
      labels:
        - logs.collector=loki
        - traefik.enable=true
        - traefik.docker.network=proxy_channel
        - traefik.http.routers.ads-backend.entrypoints=web,websecure
        - traefik.http.routers.ads-backend.rule=Host(`app.${ROOT_DOMAIN}`)
        - traefik.http.routers.ads-backend.middlewares=redirectToHttps@file,block-metrics,ads-backend-ratelimit,ads-backend-parallelism
        - traefik.http.services.ads-backend.loadbalancer.server.port=5000
        - traefik.http.middlewares.block-metrics.plugin.blockpath.regex=^/prometheus(.*)
        - traefik.http.middlewares.ads-backend-ratelimit.ratelimit.average=600
        - traefik.http.middlewares.ads-backend-ratelimit.ratelimit.burst=1000
        - traefik.http.middlewares.ads-backend-parallelism.inflightreq.amount=${max_parallel_request}
        - swarm.autoscaler=true
        - swarm.autoscaler.maximum=${max}
        - swarm.autoscaler.minimum=${min}

  django_low_traffic:
    <<: *django
    command:
      - "uvicorn"
      - "config.asgi:application"
      - "--host=0.0.0.0"
      - "--port=5000"
      - "--lifespan=off"
      - "--workers=1"
      - "--loop=uvloop"
    deploy:
      resources:
        reservations:
          cpus: '\"1.0\"'
          memory: 2048M
      update_config:
        order: start-first
      mode: replicated
      replicas: 1
      labels:
        - logs.collector=loki
        - traefik.enable=true
        - traefik.docker.network=proxy_channel
        - traefik.http.routers.ads-backend-click.entrypoints=web,websecure
        - traefik.http.routers.ads-backend-click.rule=Host(`portal.${ROOT_DOMAIN}`)
        - traefik.http.routers.ads-backend-click.middlewares=redirectToHttps@file,block-metrics
        - traefik.http.services.ads-backend-click.loadbalancer.server.port=5000
        - traefik.http.middlewares.block-metrics.plugin.blockpath.regex=^/prometheus(.*)

  celery_worker:
    image: kahfads${ENV}.azurecr.io/ethical-adserver/backend:latest
    depends_on:
      - redis
    <<: *django-env
    command: /start-celeryworker
    volumes:
      - /tmp/prometheus
    deploy:
      labels:
        - logs.collector=loki

  celery_beat:
    image: kahfads${ENV}.azurecr.io/ethical-adserver/backend:latest
    depends_on:
      - redis
    <<: *django-env
    volumes:
      - /tmp/prometheus
    command: /start-celerybeat
    deploy:
      labels:
        - logs.collector=loki

  celery_exporter:
    image: danihodovic/celery-exporter
    command:
      - "--broker-url=redis://redis:6379/0"
    networks:
      - default
      - monitoring_channel

  redis:
    image: redis:6.2.1
    command: >
      redis-server
      --maxclients 50000
      --tcp-backlog 65535
      --maxmemory 6gb
      --maxmemory-policy allkeys-lru
    sysctls:
      - net.core.somaxconn=65535
    deploy:
      resources:
        reservations:
          cpus: '\"2.0\"'
          memory: 8196M

  metabase:
    image: metabase/metabase
    volumes:
      - local_metabase_data:/metabase-data
    environment:
      - MB_ENCRYPTION_SECRET_KEY=${METABASE_SECRET_KEY}
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase_app_db
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=${POSTGRES_HOST}
      - MB_SITE_URL=
    networks:
      - default
      - proxy_channel
    deploy:
      labels:
        - logs.collector=loki
        - traefik.enable=true
        - traefik.docker.network=proxy_channel
        - traefik.http.services.metabase.loadbalancer.server.port=3000
        - traefik.http.routers.metabase.entrypoints=web,websecure
        - traefik.http.routers.metabase.middlewares=redirectToHttps@file
        - traefik.http.routers.metabase.rule=Host(`metabase.${ROOT_DOMAIN}`)

networks:
  default:
    name: ethical_ad_server_default
    driver: overlay
    attachable: true
  proxy_channel:
    name: proxy_channel
    external: true
  monitoring_channel:
    name: monitoring_channel
    external: true